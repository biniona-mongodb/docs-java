==========
Monitoring
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. What is on this page?

This guide explains how you can set up and configure **monitoring** in the
MongoDB Java driver.

.. What do any new terms mean?

Monitoring is the process of getting information about the activities a piece of
software performs. You can use the information you get from monitoring in your
application or an application performance management library. 

Monitoring the MongoDB Java driver lets you understand the
driver's resource usage and performance, and can help you make informed
decisions when designing and debugging your application.    


Monitor Connection Pools with JMX
---------------------------------

You can monitor connection pool events using **Java Management Extensions (JMX)**. 
JMX provides tools to monitor applications and devices.

For more information on JMX, see 
`the official Oracle JMX documentation <https://docs.oracle.com/javase/tutorial/jmx/index.html>`__. 

JMX Support in the MongoDB Driver
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

To enable JMX connection pool monitoring, add an instance of the
``JMXConnectionPoolListener`` class to your ``MongoClient``.

The ``JMXConnectionPoolListener`` class performs the following actions: 

- Creates MXBean instances for each ``mongod`` or ``mongos`` process the driver
  maintains a connection pool with.
- Registers these MXBean instances with the platform MBean server. 

MXBeans registered on the platform MBean server have the following properties:

.. list-table::
   :header-rows: 1
   :stub-columns: 1

   * - Property
     - Description

   * - ``clusterId``
     - A client-generated unique identifier. This identifier ensures that
       each MXBean the driver makes has a unique name when an application has 
       multiple ``MongoClient`` instances connected to the same MongoDB deployment.

   * - ``host``
     - The hostname of the machine running the ``mongod`` or ``mongos`` process.

   * - ``port``
     - The port on which the ``mongod`` or ``mongos`` process is listening.

   * - ``minSize``
     - The minimum size of the connection pool, including idle and in-use connections.

   * - ``maxSize``
     - The maximum size of the connection pool, including idle and in-use connections.

   * - ``size``
     - The current size of the connection pool, including idle and in-use connections.

   * - ``checkedOutCount``
     - The current count of connections that are in use.


All MXBean instances created by the driver are under the domain
``"org.mongodb.driver"``.

For more information on the topics discussed in this subsection, see the
following resources:

- `Oracle Platform MBean Server Reference documentation <https://docs.oracle.com/en/java/javase/16/management/overview-java-se-monitoring-and-management.html#GUID-F7B9AB8A-F5A8-472A-AEC6-93B5B7FBE7CE>`__
- `Oracle MXBean documentation <https://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html>`__

JMX and JConsole Example
~~~~~~~~~~~~~~~~~~~~~~~~

This example shows how you can monitor the driver's connection pools using JMX
and **JConsole**. JConsole is a JMX compliant GUI monitoring tool that comes with
the Java Platform.

The following code snippet adds a ``JMXConnectionPoolListener`` to a
``MongoClient`` instance. The code then starts a JMX connection server exposing
the platform MBean server on port 9999 for JConsole to connect to.

.. literalinclude:: /includes/fundamentals/code-snippets/JMXMonitoring.java
   :language: java
   :dedent:
   :start-after: start jmx-example
   :end-before: end jmx-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Start the connector server...
   The connector server started.
   Press <Enter> to stop the server.

Once you have started your server, open JConsole in your terminal using the
following command:

.. code-block:: shell
   
   jconsole

.. note:: Consult the Official JConsole Documentation

   The descriptions of the JConsole GUI on this page are illustrative
   rather than a source of truth. For guaranteed up to date information, consult 
   `the official JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__. 

Once JConsole is open, perform the following actions in the GUI:

- Select the Java process running the above example code.
- Press :guilabel:`Insecure Connection` in the warning dialog box.
- Click on the :guilabel:`MBeans` tab.
- Inspect your connection pool events under the ``"org.mongodb.driver"`` domain.

When you no longer want to inspect your connection pools in JConsole, do the
following: 

- Exit JConsole
- Disable the JMX connection server by pressing :kbd:`Enter` in the shell used
  to run the above code snippet

For more information on JMX and JConsole, see the following resources from
Oracle:

- `JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__.
- `Monitoring and Management Guide <https://docs.oracle.com/en/java/javase/16/management/monitoring-and-management-using-jmx-technology.html>`__

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`JMXConnectionPoolListener <apidocs/mongodb-driver-core/com/mongodb/management/JMXConnectionPoolListener.html>`
- `getPlatformMBeanServer() <https://docs.oracle.com/en/java/javase/16/docs/api/java.management/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()>`__
- `JMXConnectorServer <https://docs.oracle.com/en/java/javase/16/docs/api/java.management/javax/management/remote/JMXConnectorServer.html>`__
