==========
Monitoring
==========

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

.. What is on this page?

In this guide, we show you how to set up and configure **monitoring** in the
MongoDB Java driver.

.. What do any new terms mean?

Monitoring is the process of getting runtime information about the driver for
your application or an application performance management library. Monitoring
helps you understand the driver's resource usage and performance, and can help
you make informed decisions when designing and debugging your application.    

.. What can you expect to see on this page?

On this page you will learn how to:

- Monitor different types of events in the MongoDB Java Driver
- Monitor connection pool events with Java Management Extensions (JMX) and JConsole

.. Who should read this? Where should I go if this isn't the page I was looking for?

If you would like to learn how to record events in the MongoDB Java driver
rather than use realtime information about the driver in code, consider reading
our :doc:`guide on Logging </fundamentals/logging>`.

Monitor Events
--------------

The MongoDB Java driver organizes events into three categories:

- Command Events
- Cluster Events
- Connection Pool Events

The following sections show how to monitor each event category.

For a full list of the events you can monitor,
:java-docs:`see the event package of the MongoDB Java Driver <apidocs/mongodb-driver-core/com/mongodb/event/package-summary.html>`.

`You can find the source code for the examples in this section on Github here <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/Monitoring.java>`__.

Command Events
~~~~~~~~~~~~~~

A command event is an event related to a MongoDB database command. Here are some
examples of database commands that produce command events:

- ``find``
- ``insert``
- ``delete``
- ``count`` 

To monitor command events, you must write a class that implements the
``CommandListener`` interface and register an instance of that class with your
``MongoClient`` instance.

For more information on MongoDB database commands, see the
:manual:`MongoDB manual entry on database commands <reference/command/>`.

.. note:: Redacted Output

   As a security measure, the driver is unable to monitor some commands. This
   is to protect the sensitive information contained in the output of these
   commands. For a full list of commands the driver can't monitor,
   see the 
   :spec:`MongoDB command monitoring specification </command-monitoring/command-monitoring.rst#security>`.

Example
^^^^^^^

In this example we make a timer for database commands. When the driver
executes a database command on our MongoDB instance, the example code makes the
driver print the time it took to execute the command.

To make a timer, we must do the following:

- Make a class with timer functionality that implements the ``CommandListener`` interface.
- Add an instance of the class to a ``MongoClientSettings`` object.
- Configure a ``MongoClient`` instance with the ``MongoClientSettings`` object.

The following code defines the ``CommandTimer`` class which implements the
``CommandListener`` interface:

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start command-listener-impl
   :end-before: end command-listener-impl

The following code adds an instance of the ``CommandTimer`` class to a
``MongoClientSettings`` object, and configures a ``MongoClient`` instance with the
``MongoClientSettings`` object. The code then runs some database commands to test the
timer.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-command-example
   :end-before: end monitor-command-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Command 'find' took 19 milliseconds
   Command 'aggregate' took 15 milliseconds
   Command 'endSessions' took 14 milliseconds

For more information on the classes and methods mentioned in this section, see
the following API documentation.

- :java-docs:`CommandListener <apidocs/mongodb-driver-core/com/mongodb/event/CommandListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`CommandStartedEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandStartedEvent.html>`
- :java-docs:`CommandSucceededEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandSucceededEvent.html>`
- :java-docs:`CommandFailedEvent <apidocs/mongodb-driver-core/com/mongodb/event/CommandFailedEvent.html>`

Cluster Events
~~~~~~~~~~~~~~

A cluster event in the driver corresponds to a change in the state of the
MongoDB instance or cluster you have connected the driver to. Cluster events are
also called server discovery and monitoring (SDAM) events. 
 
The driver defines nine cluster events. The driver defines three separate listener
interfaces which each listen for three of the nine events:

- ``ClusterListener``: :spec:`topology </server-discovery-and-monitoring/server-discovery-and-monitoring.rst#topology>`
  related events
- ``ServerListener``: events related to ``mongod`` or ``mongos`` processes
- ``ServerMonitorListener``: heartbeat related events

For a detailed description of all cluster events in the driver, see the 
:spec:`MongoDB SDAM monitoring specification </server-discovery-and-monitoring/server-discovery-and-monitoring-monitoring.rst#events>`.

Example
^^^^^^^

In this example, we make a listener that lets us know if we have access to a
readable and writeable server. We name the class that implements this functionality
``IsReadAndWrite``.

The following code defines the ``IsReadAndWrite`` class which implements the
``ClusterListener`` interface.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start cluster-listener-impl
   :end-before: end cluster-listener-impl

The following code adds an instance of the ``IsReadAndWrite`` class to a
``MongoClient`` object. The code then runs a find operation to test our listener
class.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-cluster-example
   :end-before: end monitor-cluster-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Readable server available!
   Writable server available!

For more information on the classes and methods mentioned in this section, see
the following API documentation.

- :java-docs:`ClusterListener <apidocs/mongodb-driver-core/com/mongodb/event/ClusterListener.html>`
- :java-docs:`ServerListener <apidocs/mongodb-driver-core/com/mongodb/event/ServerListener.html>`
- :java-docs:`ServerMonitorListener <apidocs/mongodb-driver-core/com/mongodb/event/ServerMonitorListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`ClusterDescriptionChangedEvent <apidocs/mongodb-driver-core/com/mongodb/event/ClusterDescriptionChangedEvent.html>`

Connection Pool Events
~~~~~~~~~~~~~~~~~~~~~~

Connection pool events are events related to a **connection pool** held by the driver.
A connection pool is a set of open TCP connections your driver maintains with
a MongoDB instance. Connection pools help reduce the number of network handshakes
your application needs to perform with a MongoDB instance, and can help your app run
faster.

To monitor connection pool events, you must write a class that implements the
``ConnectionPoolListener`` interface and register an instance of that class with your
``MongoClient`` instance.

Example
^^^^^^^

In this example, we make a listener that prints a message each time we check
out a connection from our connection pool. We name the class that implements
this functionality ``ConnectionPoolLibrarian``.

The following code defines the ``ConnectionPoolLibrarian`` class which implements the
``ConnectionPoolListener`` interface.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start cp-listener-impl
   :end-before: end cp-listener-impl

The following code adds an instance of the ``ConnectionPoolLibrarian`` class to a
``MongoClient`` object. The code then runs a database command to test the
librarian.

.. literalinclude:: /includes/fundamentals/code-snippets/Monitoring.java
   :language: java
   :dedent:
   :start-after: start monitor-cp-example
   :end-before: end monitor-cp-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Let me get you the connection with id 21...
   Let me get you the connection with id 21...

It looks like our find operation requested two connections from the pool.
If you are curious why the driver uses two connections in one find operation, 
`you can find the answer in this line of the MongoDB driver source code <https://github.com/mongodb/mongo-java-driver/blob/a82ce71d0aa7da9c6455f1b52ae24ed3cd4c1f62/driver-sync/src/main/com/mongodb/client/internal/FindIterableImpl.java#L203>`__.

For more information on the classes and methods mentioned in this section, see
the following API documentation.

- :java-docs:`ConnectionPoolListener <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionPoolListener.html>`
- :java-docs:`MongoClientSettings <apidocs/mongodb-driver-core/com/mongodb/MongoClientSettings.html>`
- :java-docs:`MongoClient <apidocs/mongodb-driver-sync/com/mongodb/client/MongoClient.html>`
- :java-docs:`ConnectionCheckedOutEvent <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckedOutEvent.html>`
- :java-docs:`ConnectionCheckOutFailedEvent <apidocs/mongodb-driver-core/com/mongodb/event/ConnectionCheckOutFailedEvent.html>`

Monitor Connection Pools with JMX
---------------------------------

You can monitor connection pool events remotely using **Java Management Extensions**
(JMX). JMX is a technology included in the Java Platform, Standard Edition
(J2SE) since version 5.0. JMX provides a standardized way to monitor
applications and devices.

For more information on JMX, see 
`the official Oracle JMX documentation <https://docs.oracle.com/javase/tutorial/jmx/index.html>`__. 

JMX in the Driver
~~~~~~~~~~~~~~~~~

The driver supports JMX monitoring of connection pool events with the
``JMXConnectionPoolListener`` class. This class creates MXBean
instances for each server the driver maintains a connection pool with and
registers these MXBean instances with the platform MBean server. 

For more information on the topics discussed in this subsection, see the
following resources:

- `Oracle Platform MBean Server documentation <https://docs.oracle.com/javase/7/docs/api/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()>`__
- `Oracle MXBean documentation <https://docs.oracle.com/javase/tutorial/jmx/mbeans/mxbeans.html>`__

Example
~~~~~~~

In this example, we show how to monitor connection pools using JMX and
JConsole. J2SE has included JConsole since version 5.0.

The following code snippet adds a ``JMXConnectionPoolListener`` to a
``MongoClient`` instance and starts a JMX connection server on port 9999 for
JConsole to connect to.

.. literalinclude:: /includes/fundamentals/code-snippets/JMXMonitoring.java
   :language: java
   :dedent:
   :start-after: start jmx-example
   :end-before: end jmx-example

The above code snippet should produce output that looks like this:

.. code-block:: none
   :copyable: false

   Start the connector server...
   The connector server started.
   Press <Enter> to stop the server.

Once you have started your server, open JConsole in your terminal using the
following command:

.. code-block:: shell
   
   jconsole

Navigate into JConsole and inspect your connection pools.

.. figure:: /includes/figures/jconsole-demo.gif
   :alt: Demonstration of monitoring connections pool in JConsole.

When you no longer want to inspect your connection pools in JConsole, do the
following: 

- Exit JConsole
- Disable the JMC connection server by pressing :kbd:`Enter` in the shell used
  to run the above code snippet

`You can find the source code for this example on Github here <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/JMXMonitoring.java>`__.

For more information on JConsole, see the official 
`Oracle JConsole documentation <https://www.oracle.com/technical-resources/articles/java/jconsole.html>`__.

For more information on the classes and methods mentioned in this section, see
the following API documentation:

- :java-docs:`JMXConnectionPoolListener <apidocs/mongodb-driver-core/com/mongodb/management/JMXConnectionPoolListener.html>`
- `getPlatformMBeanServer() <https://docs.oracle.com/javase/7/docs/api/java/lang/management/ManagementFactory.html#getPlatformMBeanServer()>`__
- `JMXConnectorServer <https://docs.oracle.com/javase/7/docs/api/javax/management/remote/JMXConnectorServer.html>`__
