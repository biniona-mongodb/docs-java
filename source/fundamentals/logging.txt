=======
Logging
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _logging:

Overview
--------

.. What is on this page?

In this guide, we show you how to set up and configure a logger in the
MongoDB Java driver.

.. What do any new terms mean?

.. Not applicable. We are treating definition of logger as understood.

.. What can you expect to see on this page?

You will learn how to:

- Set up a logger using the Simple Logging Facade For Java (SLF4J)
- Configure the log level of your logger

.. Who should read this? Where should I go if this isn't the page I was looking for?

.. Not Applicable. No natural redirect location.

Set Up a Logger
---------------

In this section, we provide background on the dependencies necessary to set up a
logger and walk through an example logger setup. 

Background
~~~~~~~~~~

The MongoDB Java driver uses the Simple Logging Facade For Java (SLF4J).
SLF4J allows you to specify your logging framework of choice at deployment time.
For more information on SLF4J,
`see the SLF4J documentation <http://www.slf4j.org/>`__.

To set up a logger you must add the ``slf4j-api`` package, a logging framework, and a
**binding** to your project's dependency list. A binding is a piece of code that
connects the ``slf4j-api`` package with a logging framework. The example below shows
how to bind the ``slfj-api`` package to the two most popular logging frameworks, Log4j2 and
Logback.

Setting up a logger is optional. When you start your application the MongoDB
Java driver looks for the ``slf4j-api`` package in your classpath. If the driver
can't find the ``slf4j-api`` package, the driver logs the following warning with
``java.util.logging`` and disables all further logging:

.. code-block:: none

   WARNING: SLF4J not found on the classpath.  Logging is disabled for the 'org.mongodb.driver' component

Example
~~~~~~~

This example shows how to set up your logger using Maven. Click the
tab corresponding to the logging framework you would like to use in your project.

.. tabs::

   .. tab:: Logback
      :tabid: logback-binding

      Add the following dependencies to your ``pom.xml`` file.

      .. code-block:: xml

         <!-- SLF4J API -->
         <dependency>
           <groupId>org.slf4j</groupId>
           <artifactId>slf4j-api</artifactId>
           <version>1.7.30</version>
         </dependency>
         <!-- This package contains an SLF4J-Logback binding -->
         <dependency>
           <groupId>ch.qos.logback</groupId>
           <artifactId>logback-classic</artifactId>
           <version>1.2.3</version>
         </dependency>
         <!-- Logback Core Functionality -->
         <dependency>
           <groupId>ch.qos.logback</groupId>
           <artifactId>logback-core</artifactId>
           <version>1.2.3</version>
         </dependency>

      Once you have installed the above dependencies, connect to your
      MongoDB instance and retrieve a document with the following code.

      .. code-block:: java

         MongoClient mongoClient = MongoClients.create(<my uri>);
         MongoDatabase database = mongoClient.getDatabase(<my database>);
         MongoCollection<Document> collection = database.getCollection(<my collection>);
         collection.find().first();

      You should see output resembling the following:

      .. code-block:: none

         ...
         1156 [main] DEBUG o.m.driver.protocol.command - Sending command '{"find": "<your collection>", "filter": {}, "limit": 1, "singleBatch": true, "$db": "<your db>", "lsid": {"id": {"$binary": {"base64": "<server session>", "subType": "04"}}}}' with request id 13 to database <your db> on connection <your connection> to server <your server>
         1173 [main] DEBUG o.m.driver.protocol.command - Execution of command with request id 13 completed successfully in 30.01 ms on connection <your connection> to server <your server>
   
      For more information on Logback, see the
      `Logback manual <http://logback.qos.ch/manual/>`__.
   
   .. tab:: Log4j2
      :tabid: Log4j2-binding
   
      Add the following dependencies to your ``pom.xml`` file.

      .. code-block:: xml      
      
         <!-- SLF4J API -->
         <dependency>
           <groupId>org.slf4j</groupId>
           <artifactId>slf4j-api</artifactId>
           <version>1.7.30</version>
         </dependency>
         <!-- SLF4J-Log4j2 binding -->
         <dependency>
           <groupId>org.apache.logging.log4j</groupId>
           <artifactId>log4j-slf4j-impl</artifactId>
           <version>2.14.1</version>
         </dependency>
         <!-- Log4j2 core functionality -->
         <dependency>
           <groupId>org.apache.logging.log4j</groupId>
           <artifactId>log4j-core</artifactId>
           <version>2.14.1</version>
         </dependency>

      Once you have installed the above dependencies, log an error using the
      following code.

      .. code-block:: java

         import org.slf4j.Logger;
         import org.slf4j.LoggerFactory;

         ...

         Logger logger = LoggerFactory.getLogger(App.class);
         logger.error("Logging an Error");

      You should see output resembling the following:

      .. code-block:: none

         12:35:00.438 [main] ERROR <my package path> - Logging an Error

      For more information on Log4j2, see the
      `Log4j2 manual <https://logging.apache.org/log4j/2.x/manual/>`__.

Configure Your Logger
---------------------

To configure your logger, you must configure the logging framework bound to
SLF4J.

Example
~~~~~~~

In this subsection we show how to configure your logger's **log level**.

A logger's log level specifies a lower bound for how urgent a message must be
for the logger to output it.

This example shows how to configure your logger's log level to INFO.
Select the tab corresponding to the logging framework you are using in your
project.

.. tabs::

   .. tab:: Logback
      :tabid: logback-binding

      Specify Logback configurations in a file named ``logback.xml``. Your
      ``logback.xml`` file does not have to be in a specific location, but it must
      be accessible from your classpath. 

      The Logback framework defines the following log levels. You can
      see the log levels listed below in order from most urgent to least
      urgent: 
      
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE 

      To configure your Logback logger to log all messages of level INFO or
      higher, set your ``logback.xml`` file to the following.

      .. code-block:: xml

         <configuration>
         <appender name="CONSOLE"
           class="ch.qos.logback.core.ConsoleAppender">
           <!-- deny all events with a level below INFO, that is TRACE and DEBUG -->
           <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
             <level>INFO</level>
           </filter>
           <encoder>
             <pattern>
               %-4relative [%thread] %-5level %logger{30} - %msg%n
             </pattern>
           </encoder>
         </appender>
         <root level="DEBUG">
           <appender-ref ref="CONSOLE" />
         </root>
         </configuration>

      The above ``logback.xml`` file is a copy of the
      `Threshold Filter Example in chapter seven of the Logback Manual <https://logback.qos.ch/manual/filters.html#thresholdFilter>`__.

      For more information on configuring Logback, see the 
      `the Logback Manual <https://logback.qos.ch/manual/configuration.html>`__.

      .. tabs::

   .. tab:: Log4j2
      :tabid: log4j2-binding

      Specify Log4j2 configurations in a file named ``log4j2.xml``. Your
      ``log4j2.xml`` file does not have to be in a specific location, but it must
      be accessible from your classpath. 

      The Log4j2 framework defines the following log levels. You can see the
      log levels listed below in order from most urgent to least urgent: 
      
      - OFF
      - FATAL
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE
      - ALL 

      To configure your Log4j2 logger to log all messages of level INFO or
      higher, set your ``log4j2.xml`` file to the following.

      .. code-block:: xml

         <?xml version="1.0" encoding="UTF-8"?>
         <Configuration status="INFO">
            <Appenders>
               <Console name="Console" target="SYSTEM_OUT">
                     <PatternLayout pattern="%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n"/>
               </Console>
            </Appenders>
            <Loggers>
               <Root level="info">
                     <AppenderRef ref="Console"/>
               </Root>
            </Loggers>
         </Configuration>

      For more information on configuring Log4j2, see the official 
      `Log4j2 configuration guide
      <https://logging.apache.org/log4j/2.x/manual/configuration.html>`__.
