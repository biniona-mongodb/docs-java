=======
Logging
=======

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _logging:

Overview
--------

.. What is on this page?

In this guide, we show you how to set up and configure a logger in the
MongoDB Java Driver.

.. What do any new terms mean?

.. Not applicable. We are treating definition of logger as understood.

.. What can you expect to see on this page?

In this guide you will learn how to:

- Set up a logger
- Configure your log level
- Filter your logs

.. Who should read this? Where should I go if this isn't the page I was looking for?

.. Not Applicable. No natural redirect location.

Set Up a Logger
---------------

To set up a logger for your project, you need to add some dependencies.

The MongoDB Java Driver uses the Simple Logging Facade For Java (SLF4J).
SLF4J allows you to specify your logging framework of choice at deployment time.
For more information on SLF4J,
`see the SLF4J documentation <http://www.slf4j.org/>`__.

To set up a logger you must add the ``slf4j-api``, a logging framework, and a
**binding** to your project's dependency list. A binding is a piece of code that
connects the ``slf4j-api`` with a logging framework. The two most
popular logging frameworks used with the ``slf4j-api`` are ``Log4j2`` and ``Logback``.

Below are some examples demonstrating how to add SLF4J dependencies to your
project and set up your logger. 

If you are using Maven, add one of the following to your ``pom.xml`` dependencies list:

.. tabs::

   .. tab:: Logback
      :tabid: logback-binding

      Adding these dependencies will configure the MongoDB Java Driver to output
      your logs using the Logback framework.

      .. code-block:: xml

         <!-- SLF4J API -->
         <dependency>
           <groupId>org.slf4j</groupId>
           <artifactId>slf4j-api</artifactId>
           <version>1.7.30</version>
         </dependency>
         <!-- This package contains an SLF4J-Logback binding -->
         <dependency>
           <groupId>ch.qos.logback</groupId>
           <artifactId>logback-classic</artifactId>
           <version>1.2.3</version>
         </dependency>
         <!-- Logback Core Functionality -->
         <dependency>
           <groupId>ch.qos.logback</groupId>
           <artifactId>logback-core</artifactId>
           <version>1.2.3</version>
         </dependency>

   .. tab:: Log4j2
      :tabid: Log4j2-binding
   
      Adding these dependencies will configure the MongoDB Java Driver to output
      your logs using the Log4j2 framework.

      .. code-block:: xml      
      
         <!-- SLF4J API -->
         <dependency>
           <groupId>org.slf4j</groupId>
           <artifactId>slf4j-api</artifactId>
           <version>1.7.30</version>
         </dependency>
         <!-- SLF4J-Log4j2 binding -->
         <dependency>
           <groupId>org.apache.logging.log4j</groupId>
           <artifactId>log4j-slf4j-impl</artifactId>
           <version>2.14.1</version>
         </dependency>
         <!-- Log4j2 core functionality -->
         <dependency>
           <groupId>org.apache.logging.log4j</groupId>
           <artifactId>log4j-core</artifactId>
           <version>2.14.1</version>
         </dependency>
       

Configure your Logger
---------------------

To configure your logger, you will need to configure the logging framework
you specified when you set up your logger.

We will provide an example of how to set your log level with both the ``log4j2``
and the ``logback`` frameworks.

Configure Log level
~~~~~~~~~~~~~~~~~~~

Log levels form a hierarchy of messages output by a logger. Messages related to
errors are the most important, and messages related to
stack traces or debugging are the least important. Logging frameworks have some
variation in the log levels they support. 

Here is an examples demonstrating how to configure your logger's log level for
both the ``logback`` and ``log4j2`` logging frameworks.

.. tabs::

   .. tab:: Logback
      :tabid: logback-binding

      The ``logback`` framework defines five logging levels. You can see the
      five logging levels listed below in order from most important to least
      important: 
      
      - ERROR
      - WARN
      - INFO
      - DEBUG
      - TRACE 

      To configure a ``logback`` logger to filter all messages with a level
      below INFO (DEBUG and TRACE),  add the following
      configuration to your ``logback.xml`` file.

      .. code-block:: xml

         <configuration>
           <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
             <filter class="ch.qos.logback.classic.filter.LevelFilter">
               <level>INFO</level>
               <onMatch>ACCEPT</onMatch>
               <onMismatch>DENY</onMismatch>
             </filter>
             <encoder>
               <pattern>
                 %-4relative [%thread] %-5level %logger{30} - %msg%n
               </pattern>
             </encoder>
           </appender>
           <root level="DEBUG">
             <appender-ref ref="CONSOLE" />
           </root>
         </configuration>

   This example is based of the
   `Level Filter Example in chapter seven of the Logback Manual <https://logback.qos.ch/manual/filters.html#levelFilter>`__.
