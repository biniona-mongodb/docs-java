===================
Search Geospatially
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

You can query data based on geographical location using geospatial query
operators. You can format geospatial queries in the MongoDB Java driver using
one of the following coordinate systems:

- :ref:`Coordinates on an Earth-like Sphere <sphere>`
- :ref:`Coordinates on a 2D Plane <plane>`

This section contains examples of geospatial queries using different
query operators that you can run against your Atlas sample dataset.

.. _sphere:

Coordinates on an Earth-like Sphere
-----------------------------------

For geospatial queries using longitude and latitude coordinates
on an Earth-like sphere, use the :manual:`GeoJSON
</geospatial-queries/#geojson-objects>`
query format. While GeoJSON has :manual:`multiple types
</reference/geojson/>`, all GeoJSON data
types use some form of the following structure:

.. code-block:: javascript

   <field> : {
      type: <GeoJSON type>,
      coordinates: [
         [longitude_1, latitude_1],
         ...
         [longitude_n, latitude_n]
      ]
   }

GeoJSON Types
~~~~~~~~~~~~~

Your document's type determines the structure of its **positions**. A position
is the smallest location unit in GeoJSON, and roughly translates to a coordinate
expressed by both a latitude and a longitude value. Here are some common GeoJSON
types and their corresponding positions:

- ``Point``: a single position
- ``LineString``: a list of two or more positions that form a series of line segments.
- ``Polygon``: a list of positions in which the first and last
  position are the same, thus enclosing some space.

To learn more about the GeoJSON shapes you can use in MongoDB, consult the
:manual:`GeoJSON manual entry </reference/geojson/>`. 

To construct the above GeoJSON shapes in the MongoDB Java driver, use the
``Position``, ``Point``, ``LineString``, and ``Polygon`` classes.

For an example showing how to construct GeoJSON shapes using the above classes, see the 
:ref:`query within a range example at the end of this page <example_range_query>`.

Index
~~~~~

To enable querying GeoJSON data, you must add the field you would to query to a
``2dsphere`` index. The following snippet creates a ``2dsphere`` index on the
``location.geo`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2dsphere;

   // <MongoCollection setup code here>

   collection.createIndex(geo2dsphere("location.geo"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`. 

For more information on the classes and methods discussed in this section, see
the following API documentation:

- :java-docs:`Indexes.geo2dsphere() <apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#geo2dsphere(java.lang.String...)>`
- :java-docs:`Position </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Position.html>`
- :java-docs:`Point </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Point.html>`
- :java-docs:`LineString </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/LineString.html>`
- :java-docs:`Polygon </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Polygon.html>`

.. _plane:

Coordinates on a 2D Plane
-------------------------

You can also express geospatial queries using ``x`` and ``y`` coordinates on 
a two-dimensional Euclidean plane. We refer to coordinates on a two-dimensional
plane as "legacy coordinate pairs".

Structure
~~~~~~~~~

Legacy coordinate pairs have the following structure:

.. code-block:: javascript

   <field> : [ x, y ]

Your field should contain an array of two values in which the first represents 
the ``x`` axis value and the second represents the ``y`` axis value.

To construct a legacy coordinate pair in the MongoDB Java driver, use the
``Position`` class.

Index
~~~~~

To enable querying using legacy coordinate pairs, create a ``2d`` index on
the field you would like to query. The following snippet creates an index on the
``coordinates`` field using the `Indexes` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2d;

   // <MongoCollection setup code here>

   collection.createIndex(geo2d("coordinates"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`. 
   
See the 
:manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`
for more information.

For more information on the classes and methods discussed in this section, see
the following API documentation:

- :java-docs:`Indexes.geo2d() </apidocs/mongodb-driver-core/com/mongodb/client/model/Indexes.html#geo2d>`
- :java-docs:`Position </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Position.html>`


.. note::

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, consult the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

Examples
--------

The following examples use the MongoDB Atlas sample dataset. You can learn how
to  set up your own free-tier Atlas cluster and how to load the sample dataset
in our :doc:`quick start guide </quick-start>`.

The examples use the ``theaters`` collection in the ``sample_mflix`` database
from the sample dataset. The ``theaters`` collection contains a ``2dsphere`` index
on the ``location.geo`` field.

You can find the source code for the following examples on 
`Github <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/Geo.java>`__.

Query by Proximity
~~~~~~~~~~~~~~~~~~

The :manual:`$near </reference/operator/query/near/#mongodb-query-op.-near>`
operator accepts a set of longitude-latitude coordinates and returns
documents ordered from nearest to farthest. To limit the results to a
maximum distance in meters, use the ``$maxDistance`` option. For a
complete list of options, see the reference documentation for ``$near``.
The following example queries for theaters between ``10,000`` and ``5,000``
meters from the 
`Great Lawn of Central Park <https://en.wikipedia.org/wiki/Great_Lawn_and_Turtle_Pond>`__.


.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The output of the code snippet should look something like this:

.. code-block:: json
   
   {"location": {"address": {"city": "Bronx"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Long Island City"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Secaucus"}}}
   {"location": {"address": {"city": "Jersey City"}}}
   {"location": {"address": {"city": "Elmhurst"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Elmhurst"}}}

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

The :manual:`$geoWithin </reference/operator/query/geoWithin/>` operator
selects documents with geospatial data that exist within a specified
shape. 

.. figure:: /includes/figures/geo_geometry.png
   :alt: Area of Long Island we are searching for movie theaters

The following example searches for movie theaters in the section of Long Island
described in the figure above.

.. _example_range_query:

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin rangeExample
   :end-before: end rangeExample

The output of the code snippet should look something like this:

.. code-block:: json

   {"location": {"address": {"city": "Baldwin"}}}
   {"location": {"address": {"city": "Levittown"}}}
   {"location": {"address": {"city": "Westbury"}}}
   {"location": {"address": {"city": "Mount Vernon"}}}
   {"location": {"address": {"city": "Massapequa"}}}

See the :manual:`MongoDB server manual page on geospatial query operators </geospatial-queries/index.html>`
for more information on the operators you can use in your query.
