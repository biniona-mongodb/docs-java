===================
Search Geospatially
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, you can learn how to query **geospatial data**
with the MongoDB Java Driver. 

Geospatial data is data tied to a geographical location on
the surface of the earth. Examples of geospatial data include:

- Locations of movie theaters
- Borders of countries
- Routes of bicycle rides
- Dog exercise areas in New York City

You should read this guide if you would like to:

- Understand the different geospatial data formats in MongoDB.
- Build geospatial queries.

Coordinates on an Earth-like Sphere
-----------------------------------

You can represent geospatial data on an Earth-like sphere with the **GeoJSON**
format. GeoJSON is a geospatial data format. You can use the GeoJSON format to
store your data, and you must use the GeoJSON format to query your geospatial
data with MongoDB. 


GeoJSON data has the following structure:

.. code-block:: json

   "<field name>" : {
      "type": "<GeoJSON type>",
      "coordinates": [
         [<longitude>, <latitude>],
         ...
         [<longitude>, <latitude>]
      ]
   }

For definitive information on GeoJSON, see the
`official IETF GeoJSON specification <https://tools.ietf.org/html/rfc7946>`__.

.. external resource


GeoJSON Types
~~~~~~~~~~~~~

Your GeoJSON object's type determines its geometric shape.

In GeoJSON, you make a shape from **positions**. A position is the base unit in
GeoJSON, and represents a single place on earth. A position is an array
containing two or three number values: 

- a longitude in the first position
- a latitude in the second position
- an optional elevation in the third position. 

.. tip:: Order Matters

   GeoJSON orders coordinates as longitude first and latitude second. This may
   be surprising as geographic coordinate system conventions generally list
   latitude first and longitude second. Popular tools such as
   OpenStreetMap and Google Maps list coordinates as latitude first and longitude
   second. Be careful when moving geospatial data between GeoJSON and tools that
   use geographic coordinate system conventions as you may need to swap your
   longitude and latitude values. 

Here are some common GeoJSON types and their corresponding positions:

- ``Point``: a single position.
- ``LineString``: a list of two or more positions, thus forming a series of line segments.
- ``Polygon``: a list of positions in which the first and last
  position are the same, thus enclosing some space.

To learn more about the GeoJSON shapes you can use in MongoDB, see the
:manual:`GeoJSON manual entry </reference/geojson/>`.

.. external resource

Index
~~~~~

To query data stored in GeoJSON format, add the field containing
GeoJSON data to  a ``2dsphere`` index. The following snippet creates a
``2dsphere`` index on the ``location.geo`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2dsphere;

   // <MongoCollection setup code here>

   collection.createIndex(geo2dsphere("location.geo"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`.

.. guide resource

Coordinates on a 2D Plane
-------------------------

You can store geospatial data using ``x`` and ``y`` coordinates on 
a two-dimensional Euclidean plane. We refer to coordinates on a two-dimensional
plane as "legacy coordinate pairs".

Legacy coordinate pairs have the following structure:

.. code-block:: javascript

   <field> : [ x, y ]

Your field should contain an array of two values in which the first represents 
the ``x`` axis value and the second represents the ``y`` axis value.

Index
~~~~~

To query data stored as legacy coordinate pairs, you must add the field containing
legacy coordinate pairs to  a ``2d`` index. The following snippet creates a
``2d`` index on the ``coordinates`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2d;

   // <MongoCollection setup code here>

   collection.createIndex(geo2d("coordinates"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`. 
   
For more information on legacy coordinate pairs, see the
:manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`.

.. external resource

.. note::

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, see the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

   .. external resource

Geospatial Queries
------------------

Geospatial queries consist of query operators with GeoJSON query parameters.

Query Operators
~~~~~~~~~~~~~~~

To query your geospatial data, use one of the following query operators: 

- ``$near``
- ``$geoWithin``
- ``$nearSphere``
- ``$geoIntersects``

You can specify these query operators in your queries with the ``near()``, ``geoWithin()``,
``nearSphere()``, and ``geoIntersects()`` utility methods of the ``Filters``
builder class.

For more information on geospatial query operators, see the
:manual:`geospatial queries manual entry </geospatial-queries/#geospatial-query-operators>`.

.. external resource

For more information on ``Filters``, see our 
:doc:`guide on the Filters builder </fundamentals/builders/filters>`.  

Query Parameters
~~~~~~~~~~~~~~~~

To specify the GeoJSON shapes used as parameters in geospatial queries, use the
``Position``, ``Point``, ``LineString``, and ``Polygon`` classes.

For a full list of GeoJSON shapes available in the MongoDB Java driver, see the
:java-docs:`GeoJSON package </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/package-summary.html>`.

.. external resource

Examples
--------

The following examples use the MongoDB Atlas sample dataset. You can learn how
to  set up your own free-tier Atlas cluster and how to load the sample dataset
in our :doc:`quick start guide </quick-start>`.

The examples use the ``theaters`` collection in the ``sample_mflix`` database
from the sample dataset. The ``theaters`` collection contains a ``2dsphere`` index
on the ``location.geo`` field.

You can find the  
`source code for the following examples on Github here <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/Geo.java>`__.

.. external resource

Query by Proximity
~~~~~~~~~~~~~~~~~~

The ``$near`` query operator accepts a set of longitude-latitude coordinates and returns
documents ordered from nearest to farthest. In the example below, we use the
``near()`` static utility method of the ``Filters`` builder class to construct a
``$near`` query.

The following example queries for theaters between ``10,000`` and ``5,000``
meters from the 
`Great Lawn of Central Park <https://en.wikipedia.org/wiki/Great_Lawn_and_Turtle_Pond>`__.

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The output of the code snippet should look something like this:

.. code-block:: json
   
   {"location": {"address": {"city": "Bronx"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Long Island City"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Secaucus"}}}
   {"location": {"address": {"city": "Jersey City"}}}
   {"location": {"address": {"city": "Elmhurst"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Elmhurst"}}}

For more information on the ``$near`` operator, see  
:manual:`the reference documentation for $near </reference/operator/query/near/#mongodb-query-op.-near>`.

For information on ``Filters``,
:doc:`see our guide on the Filters builder </fundamentals/builders/filters>`

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

The ``$geoWithin`` operator selects documents that have geospatial data within a
specified shape. 

.. figure:: /includes/figures/geo_geometry.png
   :alt: Area of Long Island we are searching for movie theaters

The following example searches for movie theaters in the section of Long Island
described in the figure above.

.. _example_range_query:

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin rangeExample
   :end-before: end rangeExample

The output of the code snippet should look something like this:

.. code-block:: json

   {"location": {"address": {"city": "Baldwin"}}}
   {"location": {"address": {"city": "Levittown"}}}
   {"location": {"address": {"city": "Westbury"}}}
   {"location": {"address": {"city": "Mount Vernon"}}}
   {"location": {"address": {"city": "Massapequa"}}}


For more information on the ``$geoWithin`` operator, see the
:manual:`reference documentation for $geoWithin </reference/operator/query/geoWithin/>`

.. external resouce

For more information on the operators you can use in your query, see the
:manual:`MongoDB server manual page on geospatial query operators </geospatial-queries/index.html>`

.. external resource
