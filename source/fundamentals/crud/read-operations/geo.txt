===================
Search Geospatially
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, we show you how to query data based on geographical location
in the MongoDB Java Driver. 

You should read this guide if you would like to:

- Understand the different geospatial data formats in MongoDB.
- Build geospatial queries using **GeoJSON**.

Coordinates on an Earth-like Sphere
-----------------------------------

GeoJSON is a geospatial data interchange format based off of JSON. For
geospatial data with longitude and latitude coordinates
on an Earth-like sphere, use the **GeoJSON** format.

GeoJSON data has the following structure:

.. code-block:: javascript

   <field> : {
      type: <GeoJSON type>,
      coordinates: [
         [longitude_1, latitude_1],
         ...
         [longitude_n, latitude_n]
      ]
   }

You can use the GeoJSON format to store your data, and you must use the GeoJSON
format to query your geospatial data. 

For more on GeoJSON, see the `GeoJSON specification <https://tools.ietf.org/html/rfc7946>`__.

GeoJSON Types
~~~~~~~~~~~~~

Your GeoJSON object's type determines the structure of its **positions**. A position
is the base unit in GeoJSON, and roughly translates to a coordinate
containing both a latitude and a longitude value. Here are some common GeoJSON
types and their corresponding positions:

- ``Point``: a single position.
- ``LineString``: a list of two or more positions, thus forming a series of line segments.
- ``Polygon``: a list of positions in which the first and last
  position are the same, thus enclosing some space.

To learn more about the GeoJSON shapes you can use in MongoDB, see the
:manual:`GeoJSON manual entry </reference/geojson/>`. 

Index
~~~~~

To query data stored in GeoJSON format, you must add the field containing
GeoJSON data to  a ``2dsphere`` index. The following snippet creates a
``2dsphere`` index on the ``location.geo`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2dsphere;

   // <MongoCollection setup code here>

   collection.createIndex(geo2dsphere("location.geo"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`. 

Coordinates on a 2D Plane
-------------------------

You can store geospatial data using ``x`` and ``y`` coordinates on 
a two-dimensional Euclidean plane. We refer to coordinates on a two-dimensional
plane as "legacy coordinate pairs".

Legacy coordinate pairs have the following structure:

.. code-block:: javascript

   <field> : [ x, y ]

Your field should contain an array of two values in which the first represents 
the ``x`` axis value and the second represents the ``y`` axis value.

Index
~~~~~

To query data stored as legacy coordinate pairs, you must add the field containing
legacy coordinate pairs to  a ``2d`` index. The following snippet creates a
``2d`` index on the ``coordinates`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2d;

   // <MongoCollection setup code here>

   collection.createIndex(geo2d("coordinates"));

For more information on the ``Indexes`` builder, see our 
:doc:`guide on the Indexes builder </fundamentals/builders/indexes>`. 
   
For more information on legacy coordinate pairs, see the
:manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`.

.. note::

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, see the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

Geospatial Queries
------------------

To query your geospatial data, use the query operators ``$near``, ``$geoWithin``,
``$nearSphere`` and ``$geoIntersects``. You can specify these query operators in
your queries with the ``near()``, ``geoWithin()``,
``nearSphere()``, and ``geoIntersects()`` utility methods of the ``Filters``
builder class.

To specify the GeoJSON shapes used in geospatial queries, use the ``Position``,
``Point``, ``LineString``, and ``Polygon`` classes. For a full list of GeoJSON
shapes available in the MongoDB Java driver, see the
:java-docs:`GeoJSON package </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/package-summary.html>`.

For more information on geospatial queries, see the
:manual:`geospatial queries manual entry </geospatial-queries/>`.

For more information on ``Filters``, see our 
:doc:`guide on the Filters builder </fundamentals/builders/filters>`.  

For more information on the classes and methods discussed in this section, see
the following API documentation:

- :java-docs:`Position </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Position.html>`
- :java-docs:`Point </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Point.html>`
- :java-docs:`LineString </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/LineString.html>`
- :java-docs:`Polygon </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/Polygon.html>`

Examples
--------

The following examples use the MongoDB Atlas sample dataset. You can learn how
to  set up your own free-tier Atlas cluster and how to load the sample dataset
in our :doc:`quick start guide </quick-start>`.

The examples use the ``theaters`` collection in the ``sample_mflix`` database
from the sample dataset. The ``theaters`` collection contains a ``2dsphere`` index
on the ``location.geo`` field.

You can find the  
`source code for the following examples on Github here <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/Geo.java>`__.

Query by Proximity
~~~~~~~~~~~~~~~~~~

The ``$near`` query operator accepts a set of longitude-latitude coordinates and returns
documents ordered from nearest to farthest. In the example below, we use the
``near()`` static utility method of the ``Filters`` builder class to construct a
``$near`` query.

The following example queries for theaters between ``10,000`` and ``5,000``
meters from the 
`Great Lawn of Central Park <https://en.wikipedia.org/wiki/Great_Lawn_and_Turtle_Pond>`__.

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The output of the code snippet should look something like this:

.. code-block:: json
   
   {"location": {"address": {"city": "Bronx"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Long Island City"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Secaucus"}}}
   {"location": {"address": {"city": "Jersey City"}}}
   {"location": {"address": {"city": "Elmhurst"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Elmhurst"}}}

For more information on the ``$near`` operator, see  
:manual:`the reference documentation for $near </reference/operator/query/near/#mongodb-query-op.-near>`.

For information on ``Filters``,
:doc:`see our guide on the Filters builder </fundamentals/builders/filters>`

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

The ``$geoWithin`` operator selects documents that have geospatial data within a
specified shape. 

.. figure:: /includes/figures/geo_geometry.png
   :alt: Area of Long Island we are searching for movie theaters

The following example searches for movie theaters in the section of Long Island
described in the figure above.

.. _example_range_query:

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin rangeExample
   :end-before: end rangeExample

The output of the code snippet should look something like this:

.. code-block:: json

   {"location": {"address": {"city": "Baldwin"}}}
   {"location": {"address": {"city": "Levittown"}}}
   {"location": {"address": {"city": "Westbury"}}}
   {"location": {"address": {"city": "Mount Vernon"}}}
   {"location": {"address": {"city": "Massapequa"}}}


For more information on the ``$geoWithin`` operator, see the
:manual:`reference documentation for $geoWithin </reference/operator/query/geoWithin/>`

For more information on the operators you can use in your query, see the
:manual:`MongoDB server manual page on geospatial query operators </geospatial-queries/index.html>`
