===================
Search Geospatially
===================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Overview
--------

On this page, you can learn how to query **geospatial data**
with the MongoDB Java Driver. 

Geospatial data is data tied to a geographical location on
the surface of the Earth. Examples of geospatial data include:

- Locations of movie theaters
- Borders of countries
- Routes of bicycle rides
- Dog exercise areas in New York City

You should read this guide if you would like to:

- Understand the different geospatial data formats in MongoDB.
- Build geospatial queries.

Coordinates on an Earth-like Sphere
-----------------------------------

You can represent geospatial data on an Earth-like sphere with the **GeoJSON**
format. GeoJSON is a geospatial data format. You can use the GeoJSON format to
store your data, and you must use the GeoJSON format to query your geospatial
data with MongoDB. 


For a concrete reference, GeoJSON data often resembles the following structure:

.. code-block:: json

   "<field name>" : {
      "type": "<GeoJSON type>",
      "coordinates": [
         [<longitude>, <latitude>],
         ...
         [<longitude>, <latitude>]
      ]
   }

GeoJSON Types
~~~~~~~~~~~~~

Your GeoJSON object's type determines its geometric shape.

In GeoJSON, you make a geometric shape from **positions**. A position is the
base unit in GeoJSON, and represents a single place on Earth. A position is an
array containing two or three number values: 

- a longitude in the first position
- a latitude in the second position
- an optional elevation in the third position 

.. tip:: Order Matters

   GeoJSON orders coordinates as longitude first and latitude second. This may
   be surprising as geographic coordinate system conventions generally list
   latitude first and longitude second. Popular tools such as
   OpenStreetMap and Google Maps list coordinates as latitude first and longitude
   second. Be careful when moving geospatial data between GeoJSON and tools that
   use geographic coordinate system conventions as you may need to swap your
   longitude and latitude values. 

Here are some common GeoJSON types and their corresponding positions:

- ``Point``: a single position.
- ``LineString``: a list of two or more positions, thus forming a series of line segments.
- ``Polygon``: a list of positions in which the first and last
  position are the same, thus enclosing some space.


Index
~~~~~

To query data stored in the GeoJSON format, add the field containing
GeoJSON data to  a ``2dsphere`` index. The following snippet creates a
``2dsphere`` index on the ``location.geo`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2dsphere;

   // <MongoCollection setup code here>

   collection.createIndex(geo2dsphere("location.geo"));

Coordinates on a 2D Plane
-------------------------

You can store geospatial data using ``x`` and ``y`` coordinates on 
a two-dimensional Euclidean plane. We refer to coordinates on a two-dimensional
plane as "legacy coordinate pairs".

Legacy coordinate pairs have the following structure:

.. code-block:: json

   "<field name>" : [ x, y ]

Your field should contain an array of two values in which the first represents 
the ``x`` axis value and the second represents the ``y`` axis value.

Index
~~~~~

To query data stored as legacy coordinate pairs, you must add the field containing
legacy coordinate pairs to  a ``2d`` index. The following snippet creates a
``2d`` index on the ``coordinates`` field using the ``Indexes`` builder:

.. code-block:: java

   import static com.mongodb.client.model.Indexes.geo2d;

   // <MongoCollection setup code here>

   collection.createIndex(geo2d("coordinates"));



.. note::

   Spherical (``2dsphere``) and flat (``2d``) indexes support some, but
   not all, of the same query operators. For a full list of operators
   and their index compatibility, see the
   :manual:`manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.

   .. external resource

Geospatial Queries
------------------

Geospatial queries consist of query operators with GeoJSON query parameters.

Query Operators
~~~~~~~~~~~~~~~

To query your geospatial data, use one of the following query operators: 

- ``$near``
- ``$geoWithin``
- ``$nearSphere``
- ``$geoIntersects`` *requires a ``2dsphere`` index*

You can specify these query operators in the MongoDB Java driver with the
``near()``, ``geoWithin()``, ``nearSphere()``, and ``geoIntersects()`` utility
methods of the ``Filters`` builder class. 

Query Parameters
~~~~~~~~~~~~~~~~

To specify the GeoJSON shapes used as parameters in geospatial queries, use the
``Position``, ``Point``, ``LineString``, and ``Polygon`` classes of the MongoDB
Java driver.

Examples
--------

The following examples use the MongoDB Atlas sample dataset. You can learn how
to  set up your own free-tier Atlas cluster and how to load the sample dataset
in our quick start.

The examples use the ``theaters`` collection in the ``sample_mflix`` database
from the sample dataset. The ``theaters`` collection contains a ``2dsphere`` index
on the ``location.geo`` field.

The examples require the following imports:

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin exampleImports
   :end-before: end exampleImports

You can find the  
`source code for the examples on Github here <https://github.com/mongodb/docs-java/blob/master/source/includes/fundamentals/code-snippets/Geo.java>`__.

.. external resource

Query by Proximity
~~~~~~~~~~~~~~~~~~

The ``$near`` query operator accepts a set of longitude-latitude coordinates and returns
documents ordered from nearest to farthest. In the example below, we use the
``near()`` static utility method of the ``Filters`` builder class to construct a
``$near`` query.

The following example queries for theaters between ``10,000`` and ``5,000``
meters from the 
`Great Lawn of Central Park <https://en.wikipedia.org/wiki/Great_Lawn_and_Turtle_Pond>`__.

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin findExample
   :end-before: end findExample

The output of the code snippet should look something like this:

.. code-block:: json
   
   {"location": {"address": {"city": "Bronx"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Long Island City"}}}
   {"location": {"address": {"city": "New York"}}}
   {"location": {"address": {"city": "Secaucus"}}}
   {"location": {"address": {"city": "Jersey City"}}}
   {"location": {"address": {"city": "Elmhurst"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Flushing"}}}
   {"location": {"address": {"city": "Elmhurst"}}}

Query Within a Range
~~~~~~~~~~~~~~~~~~~~

The ``$geoWithin`` operator selects documents that have geospatial data within a
specified shape. 

.. figure:: /includes/figures/geo_geometry.png
   :alt: Area of Long Island we are searching for movie theaters

The following example searches for movie theaters in the section of Long Island
described in the figure above.

.. _example_range_query:

.. literalinclude:: /includes/fundamentals/code-snippets/Geo.java
   :language: java
   :dedent:
   :start-after: begin rangeExample
   :end-before: end rangeExample

The output of the code snippet should look something like this:

.. code-block:: json

   {"location": {"address": {"city": "Baldwin"}}}
   {"location": {"address": {"city": "Levittown"}}}
   {"location": {"address": {"city": "Westbury"}}}
   {"location": {"address": {"city": "Mount Vernon"}}}
   {"location": {"address": {"city": "Massapequa"}}}


Further Reading
---------------

For information on the topics discussed on this page, visit the following links.

MongoDB Java Driver Guides
~~~~~~~~~~~~~~~~~~~~~~~~~~

- :doc:`Guide on the Filters builder </fundamentals/builders/filters>`
- :doc:`Guide on the Indexes builder </fundamentals/builders/indexes>`
- :doc:`quick start guide </quick-start>`

MongoDB Manual 
~~~~~~~~~~~~~~

- :manual:`MongoDB server manual page on geospatial query operators </geospatial-queries/index.html>`
- :manual:`Reference documentation for $geoWithin </reference/operator/query/geoWithin/>`
- :manual:`Reference documentation for $near </reference/operator/query/near/#mongodb-query-op.-near>`
- :manual:`GeoJSON manual entry </reference/geojson/>`
- :manual:`MongoDB server manual page on legacy coordinate pairs </geospatial-queries/#legacy-coordinate-pairs>`
- :manual:`Manual entry for geospatial queries </geospatial-queries/#geospatial-query-operators>`.


External Resources
~~~~~~~~~~~~~~~~~~

- `official IETF GeoJSON specification <https://tools.ietf.org/html/rfc7946>`__

MongoDB Java Driver API Documentation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- :java-docs:`GeoJSON package </apidocs/mongodb-driver-core/com/mongodb/client/model/geojson/package-summary.html>`