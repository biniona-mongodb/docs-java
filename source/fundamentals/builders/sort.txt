==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to specify **sort criteria** for your
queries using **builders**.

Sort criteria are the rules MongoDB uses to sort your data. Some
examples of sort criteria are:

* Smallest number to largest number
* Earliest time of day to latest time of day
* Alphabetical order by first name 

The builder pattern allows you to create complex immutable objects
separately from their representation. :doc:`Builders </fundamentals/builders/>` 
are classes provided by the MongoDB Java driver that allow you to use
the builder pattern to construct
:java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html>` objects.
The builders provided by the MongoDB Java driver can improve the
readability of your code.

You should read this guide if you would like to:

* Use the builder pattern to specify sort criteria for your queries.
* Perform ascending sorts and descending sorts.
* Combine sort criteria.
* Sort on the text score of a
  :manual:`text search </core/text-search-operators/>`.

If you want to learn the fundamentals of sorting in the MongoDB Java
driver, consider reading our
:doc:`guide on sorting </fundamentals/crud/read-operations/sort/>`.

The Sorts Class
---------------

The :java-docs:`Sorts </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class is the sort criteria builder provided by the MongoDB Java driver.
``Sorts`` provides static factory methods for all sort criteria
operators supported by MongoDB. All methods return a
:java-docs:`Bson </apidocs/bson/org/bson/conversions/Bson.html>`
object that you can pass to the 
:java-docs:`sort() </apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#sort(org.bson.conversions.Bson)>`
method of a ``FindIterable`` instance. 

.. _sorts-builders-sort-example:

The following examples show you how to use the methods
provided by the ``Sorts`` class to sort your queries. The examples use a
sample collection, ``sort_example``, that contains the following documents:

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Sorting Direction
-----------------

The ``Sorts`` class provides two methods for specifying the sort direction
of your collection of data. You can sort your data from smallest to
largest with ``Sorts.ascending()``, and you can sort your data from
largest to smallest with ``Sorts.descending()``. The following two
subsections provide examples on how to use these two methods. 

Ascending
~~~~~~~~~

An ascending sort returns your documents from smallest to largest based
on the value of a specified field. To specify an ascending sort, use the
``Sorts.ascending()`` static factory method. Pass ``Sorts.ascending()``
the name of the field you need to sort on.

The ``ascending()`` method can be used as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>

   collection.find().sort(ascending("<field name>"));

The above ``sort()`` method returns a 
:java-docs:`FindIterable </apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html>`
object containing the documents in your collection, sorted from smallest
to largest on the specified field name. 

.. example::

   In this code example, we use the ``ascending()`` method to sort the
   :ref:`sort_example collection <sorts-builders-sort-example>`  
   by ``_id``:

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.ascending;
   
      // <MongoCollection setup code here>
      
      Bson idSort = ascending("_id");
      List<Document> results = new ArrayList<>();
      collection.find().sort(idSort).into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }

   The output of the code snippet above should look something like this: 
   
   .. code-block:: json
   
      {"_id": 1, "letter": "c", "food": "coffee with milk"}
      {"_id": 2, "letter": "a", "food": "donuts and coffee"}
      {"_id": 3, "letter": "a", "food": "maple syrup"}
      ...
   
Note that MongoDB does not guarantee sort order for documents that have
fields with identical values. This means that if you pass "letter" to
the ``ascending()`` method, the first document returned could be any
of the following documents:

.. code-block:: json

   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}

If you need guaranteed sort order for documents that
have fields with identical values you can specify additional fields to sort
on in the event of a tie.

We can specify an ascending sort on ``letter`` followed
by ``_id`` as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>
   
   collection.find().sort(ascending("letter", "_id"));

The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`  
in the following order: 

.. code-block:: json

   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Descending
~~~~~~~~~~

A descending sort returns your documents from largest to smallest based
on the value of a specified field. To specify a descending sort, use the
``Sorts.descending()`` static factory method. Pass
``Sorts.descending()`` the name of the field you need to sort on.

The following code snippet shows how to specify a descending sort on the
``_id`` field: 

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("_id"));


The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`  
in the following order: 

.. code-block:: json

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   ...

Note that MongoDB does not guarantee sort order for documents that have
fields with identical values. This means that if you pass "letter" to
the ``descending()`` method, the first document returned could be any of
the following documents:

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}

If you need guaranteed sort order for documents that
have fields with identical values you can specify additional fields to sort
on in the event of a tie. 

The following code snippet shows how to specify a descending
sort on the ``letter`` field followed by the ``_id`` field: 

.. code-block:: java

   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("letter", "_id"));


The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`  
in the following order: 

.. code-block:: json

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}

Combining Sort Criteria
-----------------------

To combine sort criteria, use the ``Sorts.orderBy()`` static factory
method. The ``orderBy()`` method applies additional sort criteria from
left to right in the event of ties. 

In the following code snippet, we use the ``orderBy()`` method to combine a
descending sort on ``letter`` with an ascending sort on ``_id``.

.. code-block:: java

   import static com.mongodb.client.model.Sorts.orderBy;
   import static com.mongodb.client.model.Sorts.ascending;
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>

   Bson orderBySort = orderBy(descending("letter"), ascending("_id"));
   collection.find().sort(orderBySort);

The code snippet above returns the documents in the
:ref:`sort_example collection <sorts-builders-sort-example>`
in the following order: 

.. code-block:: json

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}

Text Score
----------

If you are using the :manual:`$text </reference/operator/query/text/>`
query operator to perform text searches on your collections of data you
can sort the results of those text searches by
:manual:`text score </reference/operator/aggregation/meta/#exp._S_meta>`
(how well your search matched each returned document). To sort your search
results by the text score associated with your text search so the best match
is returned first, use the ``Sorts.metaTextScore()`` static factory method. Note
that the ``$text`` query operator performs a text search on the content indexed
by the :manual:`text index </core/index-text/>` of your collection. You must
create a text index on your collection before you can run a text search
and use ``Sorts.metaTextScore()``.

.. note::

  If your MongoDB instance is running MongoDB 4.2 and earlier, in order
  to use ``Sorts.metaTextScore()`` as sort criteria in the ``sort()``
  method of a ``FindIterable`` instance, you must also include
  ``Sorts.metaTextScore()`` in in the ``projection()`` method of that
  ``FindIterable`` instance. This is demonstrated in the code example below.

.. example::

   In the following code example, we show how to use the
   ``Sorts.metaTextScore()`` method to sort the results of a text
   search on the :ref:`sort_example collection <sorts-builders-sort-example>`.
   The following code snippet works as follows:

   #. Create a text index for the
      :ref:`sort_example collection <sorts-builders-sort-example>`
      on the ``food`` field.
   #. Run a text search for the phrase "maple donut".
   #. Project ``Sorts.metaTextScore()`` into your query results as the
      ``score`` field. This step is optional if your MongoDB instance is
      running MongoDB 4.4 or later. 
   #. Sort using ``Sorts.metaTextScore()`` as your sort criteria.

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.metaTextScore;
      import static com.mongodb.client.model.Sorts.ascending;
      import com.mongodb.client.model.Filters;
      import com.mongodb.client.model.Indexes;

      // <MongoCollection setup code here>
      
      // create a text index on the food field using the Indexes.text() builder
      collection.createIndex(Indexes.text("food"));
      // create the text score sort criteria
      Bson metaTextScoreSort = metaTextScore("score");
      String searchTerm = "maple donut";
      // build a $text query operator using the Filters.text() builder
      Bson searchQuery = Filters.text(searchTerm);
      collection.find(searchQuery)
              // project the text score into your results on the "score" field (optional in MongoDB 4.4 or later)
              .projection(metaTextScoreSort)
              // sort the results on the "score" field
              .sort(metaTextScoreSort)
              .into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }
   
   The output of the code snippet above should look something like this: 
   
   .. code-block:: json

      {"_id": 6, "letter": "c", "food": "maple donut", "score": 1.5}
      {"_id": 2, "letter": "a", "food": "donuts and coffee", "score": 0.75}
      {"_id": 3, "letter": "a", "food": "maple syrup", "score": 0.75}

For additional information on the ``Sorts`` class, see the 
:java-docs:`Sorts class API documentation </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`.
For additional information on the ``$text`` query operator and the
``$meta`` aggregation pipeline operator, see the server manual
documentation for :manual:`$text </reference/operator/query/text/>` and
:manual:`$meta </reference/operator/aggregation/meta/>`.
