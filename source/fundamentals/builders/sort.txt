==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to use builders to construct sort
criteria for your queries. We will learn how to use the
:java-docs:`Sorts <apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class. 


The Sorts Class
---------------

The ``Sorts`` class provides static factory methods for all
sort criteria operators supported by MongoDB. Each method returns
an instance of the
:java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html?>`
type. 

The following examples will show you how to use the static factory
methods from the ``Sorts`` class to sort your queries.
The examples use a sample collection ``sort_example`` constructed as 
follows:

.. code-block:: java
   
   // MongoDatabase database = <code to instantiate your database>;
   
   MongoCollection<Document> collection = database.getCollection("sort_example");
   Document doc1 = new Document("number", 1).append("letter", "c");
   Document doc2 = new Document("number", 3).append("letter", "a");
   Document doc3 = new Document("number", 4).append("letter", "b");
   Document doc4 = new Document("number", 5).append("letter", "a");
   Document doc5 = new Document("number", 2).append("letter", "a");
   Document doc6 = new Document("number", 6).append("letter", "c");

   List<Document> documents = Arrays.asList(new Document[]{doc1, doc2, doc3, doc4, doc5});
   collection.insertMany(documents);

The above snippet populates the ``sort_example`` collection with five documents:

.. code-block:: none

   {"number": 1, "letter": "c"}
   {"number": 3, "letter": "a"}
   {"number": 4, "letter": "b"}
   {"number": 5, "letter": "a"}
   {"number": 2, "letter": "a"}
   {"number": 6, "letter": "c"}


Ascending
---------

To specify an ascending sort, use the ``Sorts.ascending()``
static factory method. This will sort your results
from smallest to largest on the field name specified.

In the following code snippet, we use ``ascending`` to
sort the ``sort_example`` collection by ``number``:

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>
   
   Bson number_sort = ascending("number");
   List<Document> results = new ArrayList<>();
   collection.find().sort(number_sort)
           .projection(new Document("_id", 0))
           .into(results);
   for (Document result : results) {
       System.out.println(result.toJson());
   }

The output of the above code snippet looks something like this: 

.. code-block:: none

   {"number": 1, "letter": "c"}
   {"number": 2, "letter": "a"}
   {"number": 3, "letter": "a"}
   {"number": 4, "letter": "b"}
   {"number": 5, "letter": "a"}
   {"number": 6, "letter": "c"}


An important thing for you to keep in mind is that MongoDB does
not provide guarentees on sort order for fields with identical values.
This means that ``asending("letter")`` could have any of these three
documents in any of the first three positions: 

.. code-block:: none

   {"number": 3, "letter": "a"}
   {"number": 5, "letter": "a"}
   {"number": 2, "letter": "a"}

If you would like to have a guarenteed sort order for fields
with identical values, you can specify additional fields to sort
on in the event of a tie. 

In the following code snippet, we use the sort field to
sort the ``sort_example`` collection on ``letter`` followed
by ``number``:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>
   
   Bson letter_number_sort = ascending("letter", "number");
   List<Document> results = new ArrayList<>();
   collection.find().sort(letter_number_sort)
           .projection(new Document("_id", 0))
           .into(results);
   for (Document result : results) {
       System.out.println(result.toJson());
   }

The output of the above code snippet looks something like this: 

.. code-block:: none

   {"number": 2, "letter": "a"}
   {"number": 3, "letter": "a"}
   {"number": 5, "letter": "a"}
   {"number": 4, "letter": "b"}
   {"number": 1, "letter": "c"}
   {"number": 6, "letter": "c"}

Descending
----------

To specify a descending sort, use the ``Sorts.descending()``
static factory method. A descending sort will return results
from largest to smallest.

In the following code snippet, we use ``descending`` to
sort the ``sort_example`` collection by ``number``: 

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   Bson number_sort = descending("number");
   List<Document> results = new ArrayList<>();
   collection.find().sort(number_sort)
           .projection(new Document("_id", 0))
           .into(results);
   for (Document result : results) {
       System.out.println(result.toJson());
   }

The output of the above code snippet looks something like this: 

.. code-block:: none

   {"number": 5, "letter": "a"}
   {"number": 4, "letter": "b"}
   {"number": 3, "letter": "a"}
   {"number": 2, "letter": "a"}
   {"number": 1, "letter": "c"}
