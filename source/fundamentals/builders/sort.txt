==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to use **builders** to specify
**sort criteria** for your queries.

Sort criteria are the rules MongoDB uses to sort your data. Some examples of sort criteria are:

* Smallest number to largest number
* Earliest to latest time of day
* Alphabetical order by first name 

Builders are classes provided by the MongoDB Java driver that allow you to use
the builder pattern to interact with your MongoDB instance.
The builder pattern is an Object Oriented design technique for creating complex
immutable objects seperately from their representation.

You should read this guide if you would like to use the builder pattern
to specify sort criteria for your queries. If you are new to sorting in the
MongoDB Java driver, consider reading our
:doc:`CRUD Sort Guide </fundamentals/crud/read-operations/sort/>`
for a general sort introduction.

The Sorts Class
---------------

The :java-docs:`Sorts <apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class is the sort criteria builder provided by the MongoDB Java Driver.
``Sorts`` provides static factory methods for all
sort criteria operators supported by MongoDB. Each method returns
an instance of the
:java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html?>`
type. 

The following examples show you how to use the static factory
methods from the ``Sorts`` class to sort your queries.
The examples use a sample collection ``sort_example`` that contains
the following documents:

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Sorting Data
------------

The ``Sorts`` class provides two methods for specyfying the sort order of data
that does not contain any duplicate values. Data can be sorted from smallest to largest 
with ``Sorts.ascending()``, and data can be sorted from largest to smalled with
``Sorts.descending()``. The following two subsections provide provide examples
on how to use these two methods. 

Ascending
~~~~~~~~~

To specify an ascending sort, use the ``Sorts.ascending()``
static factory method. An ascending sort returns 
your documents from smallest to largest on the field name specified.

The ``ascending`` method can be used as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts

   // <MongoCollection setup code here>

   collection.find().sort(Sorts.ascending("<fieldname>"))

.. example::

   In this example, we use ``ascending`` to
   sort the ``sort_example`` collection by ``"_id"``:

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.ascending;
   
      // <MongoCollection setup code here>
      
      Bson id_sort = ascending("_id");
      List<Document> results = new ArrayList<>();
      collection.find().sort(id_sort).into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }

   The output of the above code snippet should look something like this: 
   
   .. code-block:: none
   
      {"_id": 1, "letter": "c", "food": "coffee with milk"}
      {"_id": 2, "letter": "a", "food": "donuts and coffee"}
      {"_id": 3, "letter": "a", "food": "maple syrup"}
      ...
   
An important thing for you to keep in mind is that MongoDB does
not guarentee sort order for fields with identical values.
This means that ``asending("letter")`` could have any of these three
documents in any of the first three positions: 

.. code-block:: none

   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "donuts and coffee"}

If you would like to have a guarenteed sort order for fields
with identical values, you can specify additional fields to sort
on in the event of a tie. 

We can specify an ``ascending`` sort on ``"letter"`` followed
by ``"_id"`` as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>
   
   collection.find().sort(ascending("letter", "_id"))

The above sort criteria returns the documents in the
``sort_example`` collection in the following order: 

.. code-block:: none

   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Descending
~~~~~~~~~~

To specify a descending sort, use the ``Sorts.descending()``
static factory method. A descending sort returns your documents
from largest to smallest on the field name specified.

The following code snippet shows how to specify a ``descending``
sort on the ``"_id"`` field: 

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("_id"))


The above sort criteria returns the documents
in the ``sort_example`` collection
in the following order: 

.. code-block:: none

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   ...

It is important for you to keep in mind that ``descending``
does not provide guarentees on sort order in the event of identical values.
This means that ``descending("letter")`` could return either of these two
documents in the first position from the ``sort_example`` collection:

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}

If you would like to have a guarenteed sort order for fields
with identical values, you can specify additional fields to sort
on in the event of a tie. 

The following code snippet shows how to specify a ``descending``
sort on the ``"letter"`` field followed by the ``"_id"`` field: 

.. code-block:: java

   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("letter", "_id"))


The above sort criteria would return the documents
in the ``sort_example`` collection
in the following order: 

.. code-block:: none

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}


Text Score
----------

If you are using :manual:`$text </reference/operator/query/text/>`
queries to search your data, you can sort the results of those
queries by text score (how well the search matched the returned document).
To create a sortable field on the 
:manual:`$meta </reference/operator/aggregation/meta/#exp._S_meta>`
``"textScore"`` associated with a ``$text`` query, use the
``Sorts.metaTextScore(<fieldname used in projection>)`` static factory method to retrieve
a ``Bson`` document that can be added to your query results using
:java-docs:`projection <apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html#projection(org.bson.conversions.Bson)>`. 
You can then use the ``Sorts`` class to sort on ``"<fieldname used in projection>"``.

The ``$text`` command performs a text search on the content indexed by the 
:manual:`text index </core/index-text/>` on your collection.
To add a text index to the ``sort_example`` collection on the ``"food"`` field,
go into the ``mongo`` shell and run the following command:

.. example::

   In the following code example, we show how to use the
   ``metaTextScore()`` method to sort the results of a ``$text``
   query. The following code snippet
   works as follows:

   #. Create a text index on the ``"food"`` field
   #. Run a ``$text`` search for the phrase ``"maple donut"`` 
   #. Project the ``metaTextScore`` builder return value into document results as ``"textScore"`` field
   #. Run ``ascending`` sort on ``"textScore"`` field

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.metaTextScore;
      import static com.mongodb.client.model.Sorts.ascending;
   
      // <MongoCollection setup code here>
      
      // create a text index on the food field
      collection.createIndex(Indexes.text("food"));
      String projectedSortField = "textScore";
      Bson metaTextScore = metaTextScore(projectedSortField);
      String searchTerm = "maple donut";
      // build $text search query
      Bson searchQuery = new Document("$text", new Document("$search", searchTerm));
      collection.find(searchQuery)
              // project the text score into documents on the "textScore" field
              .projection(metaTextScore)
              // sort the documents on the "textScore" field
              .sort(ascending(projectedSortField))
              .into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }
   
   The output of the above code snippet should look something like this: 
   
   .. code-block:: none
   
      {"_id": 2, "letter": "a", "food": "donuts and coffee", "textScore": 0.75}
      {"_id": 3, "letter": "a", "food": "maple syrup", "textScore": 0.75}
      {"_id": 6, "letter": "c", "food": "maple donut", "textScore": 1.5}

Combining Sort Criteria
-----------------------

To combine sort criteria, use the ``Sorts.orderBy()``
static factory method. The ``orderBy()`` method applies additional
sort criteria from left to right in the event of ties. 

In the following code snippet, we use ``orderBy`` to combine a
``descending`` on ``"letter"`` with an ``ascending`` sort on ``"_id"``.

.. code-block:: java

   import static com.mongodb.client.model.Sorts.orderBy;

   // <MongoCollection setup code here>

   Bson orderBySort = orderBy(descending("letter"),
           ascending("_id"));
   collection.find()
           .sort(orderBySort).into(results);
   for (Document result : results) {
       System.out.println(result.toJson());
   }

The output of the above code snippet should look something like this: 

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}