==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to use builders to construct sort
criteria for your queries. We will learn how to use the
:java-docs:`Sorts <apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class. 


The Sorts Class
---------------

The ``Sorts`` class provides static factory methods for all
sort criteria operators supported by MongoDB. Each method returns
an instance of the
:java-docs:`Bson <apidocs/bson/org/bson/conversions/Bson.html?>`
type. 

The following examples show how to use some of the static factory
methods from the sorts class. The examples use a sample collection
``sort_example`` constructed as follows.

.. code-block:: java
   
   // MongoDatabase database = <code to instantiate your database>;
   
   MongoCollection<Document> collection = database.getCollection("sort_example");
   Document doc1 = new Document("number",1).append("letter", "a");
   Document doc2 = new Document("number",2).append("letter", "a");
   Document doc3 = new Document("number",3).append("letter", "a");
   Document doc4 = new Document("number",4).append("letter", "b");
   Document doc5 = new Document("number",5).append("letter", "c");
   List<Document> documents = Arrays.asList(new Document[]{doc1,doc2,doc3,doc4,doc5});
   collection.insertMany(documents);


Ascending
---------

To specify an ascending, use on of the ``Sorts.ascending()``
static factory methods.


