==============
Sorts Builders
==============

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. _sorts-builders:

Overview
--------

In this guide, we show you how to use **builders** to specify
**sort criteria** for your queries.

Sort criteria are the rules MongoDB uses to sort your data. Some examples of sort criteria are:

* Smallest number to largest number
* Earliest time of day to latest time of day
* Alphabetical order by first name 

Builders are classes provided by the MongoDB Java driver that allow you to use
the builder pattern to interact with your MongoDB instance.
The builder pattern allows you to create complex
immutable objects separately from their representation. The
:doc:`builders </fundamentals/builders/>`
provided by the MongoDB Java driver can improve the readability of your code.

You should read this guide if you would like to:

* Use the builder pattern to specify sort criteria for your queries.
* Learn how to perform ascending sorts, descending sorts, and combining sorts.
* Sort on the text score of :manual:`$text </reference/operator/query/text/>` 
  queries.

If you are new to sorting in the
MongoDB Java driver, consider reading our
:doc:`guide on sorting </fundamentals/crud/read-operations/sort/>`
for a general introduction to sorting with the MongoDB Java driver.

The Sorts Class
---------------

The :java-docs:`Sorts </apidocs/mongodb-driver-core/com/mongodb/client/model/Sorts.html>`
class is the sort criteria builder provided by the MongoDB Java Driver.
``Sorts`` provides static factory methods for all
sort criteria operators supported by MongoDB. Each method returns
an instance of the
:java-docs:`Bson </apidocs/bson/org/bson/conversions/Bson.html>`
type. 

The following examples show you how to use the static factory
methods provided by the ``Sorts`` class to sort your queries.
The examples use a sample collection ``sort_example`` that contains
the following documents:

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Sorting Direction
-----------------

The ``Sorts`` class provides two methods for specifying the sort order of data
that does not contain any duplicate values. Data can be sorted from smallest to largest 
with ``Sorts.ascending()``, and data can be sorted from largest to smallest with
``Sorts.descending()``. The following two subsections provide examples
on how to use these two methods. 

Ascending
~~~~~~~~~

To specify an ascending sort, use the ``Sorts.ascending()``
static factory method. An ascending sort returns 
your documents from smallest to largest on the field name specified.

The ``ascending`` method can be used as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>

   collection.find().sort(ascending("<field name>"));

This returns a 
:java-docs:`FindIterable </apidocs/mongodb-driver-sync/com/mongodb/client/FindIterable.html>`
object containing the documents in your collection sorted 
from smallest to largest on the specified field name. 

.. example::

   In this code example, we use ``ascending`` to
   sort the ``sort_example`` collection by ``"_id"``:

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.ascending;
   
      // <MongoCollection setup code here>
      
      Bson idSort = ascending("_id");
      List<Document> results = new ArrayList<>();
      collection.find().sort(idSort).into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }

   The output of the above code snippet should look something like this: 
   
   .. code-block:: none
   
      {"_id": 1, "letter": "c", "food": "coffee with milk"}
      {"_id": 2, "letter": "a", "food": "donuts and coffee"}
      {"_id": 3, "letter": "a", "food": "maple syrup"}
      ...
   
Note that MongoDB does not guarantee sort order for documents that have
fields with identical values. This means that ``ascending("letter")``
could have any of these documents in the first position: 

.. code-block:: none

   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 2, "letter": "a", "donuts and coffee"}

If you would like to have a guaranteed sort order 
for documents that have fields with identical values
you can specify additional fields to sort
on in the event of a tie. 

We can specify an ``ascending`` sort on ``"letter"`` followed
by ``"_id"`` as follows:

.. code-block:: java

   import static com.mongodb.client.model.Sorts.ascending;

   // <MongoCollection setup code here>
   
   collection.find().sort(ascending("letter", "_id"));

The above code snippet returns the documents in the
``sort_example`` collection in the following order: 

.. code-block:: none

   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}


Descending
~~~~~~~~~~

To specify a descending sort, use the ``Sorts.descending()``
static factory method. A descending sort returns your documents
from largest to smallest on the field name specified.

The following code snippet shows how to specify a ``descending``
sort on the ``"_id"`` field: 

.. code-block:: java
   
   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("_id"));


The above code snippet returns the documents in the
``sort_example`` collection in the following order: 

.. code-block:: none

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   ...

Note that MongoDB does not guarantee sort order for documents that have
fields with identical values. This means that ``descending("letter")``
could have any of these documents in the first position: 

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}

If you would like to have a guaranteed sort order 
for documents that have fields with identical values
you can specify additional fields to sort
on in the event of a tie. 

The following code snippet shows how to specify a ``descending``
sort on the ``"letter"`` field followed by the ``"_id"`` field: 

.. code-block:: java

   import static com.mongodb.client.model.Sorts.descending;

   // <MongoCollection setup code here>
   
   collection.find().sort(descending("letter", "_id"));


The above code snippet returns the documents in the
``sort_example`` collection in the following order: 

.. code-block:: none

   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}

Combining Sort Criteria
-----------------------

To combine sort criteria, use the ``Sorts.orderBy()``
static factory method. The ``orderBy()`` method applies additional
sort criteria from left to right in the event of ties. 

In the following code snippet, we use ``orderBy`` to combine a
``descending`` sort on ``"letter"`` with an ``ascending`` sort on ``"_id"``.

.. code-block:: java

   import static com.mongodb.client.model.Sorts.orderBy;

   // <MongoCollection setup code here>

   Bson orderBySort = orderBy(descending("letter"), ascending("_id"));
   collection.find().sort(orderBySort);

The above code snippet returns the documents in the
``sort_example`` collection in the following order: 

.. code-block:: none

   {"_id": 1, "letter": "c", "food": "coffee with milk"}
   {"_id": 6, "letter": "c", "food": "maple donut"}
   {"_id": 4, "letter": "b", "food": "coffee with sugar"}
   {"_id": 2, "letter": "a", "food": "donuts and coffee"}
   {"_id": 3, "letter": "a", "food": "maple syrup"}
   {"_id": 5, "letter": "a", "food": "milk and cookies"}

Text Score
----------

If you are using :manual:`$text </reference/operator/query/text/>`
queries to search your data you can sort the results of those
queries by text score (how well your search matched the returned document).
To sort your results by the
:manual:`$meta </reference/operator/aggregation/meta/#exp._S_meta>`
``"textScore"`` associated with a ``$text`` query, use the
``Sorts.metaTextScore()`` static factory method to retrieve a sort specification
for a descending sort by score (best match first).

.. note::

  If your MongoDB instance is running MongoDB 4.2 and earlier,
  to use a ``Sorts.metaTextScore()``
  expression with ``FindIterable.sort()``, you must also
  include the same expression in a projection. This is demonstrated
  in the code example below.

The ``$text`` command performs a text search on the content indexed by the 
:manual:`text index </core/index-text/>` of your collection. You must create
a text index on your collection before you can run a ``$text`` query and use
``Sorts.metaTextScore()``.

.. example::

   In the following code example, we show how to use the
   ``metaTextScore()`` method to sort the results of a ``$text``
   query on ``sort_example``. The following code snippet
   works as follows:

   #. Create a text index for ``sort_example`` on the ``"food"`` field.
   #. Run a ``$text`` search for the phrase ``"maple donut"``.
   #. Project ``metaTextScore("score")`` into your query results.
      This step is optional if your MongoDB instance is running MongoDB 4.4 or later. 
   #. Sort using ``metaTextScore("score")`` as a sort specification.

   .. code-block:: java
   
      import static com.mongodb.client.model.Sorts.metaTextScore;
      import static com.mongodb.client.model.Sorts.ascending;
   
      // <MongoCollection setup code here>
      
      // create a text index on the food field
      collection.createIndex(Indexes.text("food"));
      // create text score sort specification
      Bson metaTextScoreSort = metaTextScore("score");
      String searchTerm = "maple donut";
      // build $text search query
      Bson searchQuery = new Document("$text", new Document("$search", searchTerm));
      collection.find(searchQuery)
              // project the text score into documents on the "score" field (optional in MongoDB 4.4 or later)
              .projection(metaTextScoreSort)
              // sort the documents on the "textScore" field
              .sort(metaTextScoreSort)
              .into(results);
      for (Document result : results) {
          System.out.println(result.toJson());
      }
   
   The output of the above code snippet should look something like this: 
   
   .. code-block:: none

      {"_id": 6, "letter": "c", "food": "maple donut", "score": 1.5}
      {"_id": 2, "letter": "a", "food": "donuts and coffee", "score": 0.75}
      {"_id": 3, "letter": "a", "food": "maple syrup", "score": 0.75}
