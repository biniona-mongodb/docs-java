=======================
Find Multiple Documents
=======================

.. default-domain:: mongodb

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

Example
-------

The following example shows how to retrieve multiple documents from your MongoDB
collection. 

This code snippet finds and prints all documents that match a query on
the ``movies`` collection of the Atlas sample dataset.

Code
~~~~

.. literalinclude:: /includes/usage-examples/code-snippets/Find.java
   :language: java

Output
~~~~~~

The output of the above code snippet should look like this:

.. code-block:: json

   {
       "name":"John",
       "age":30,
       "cars": {
           "car1":"Ford",
           "car2":"BMW",
           "car3":"Fiat"
       }
   }

Background
~~~~~~~~~~

The code snippet above uses the following objects and methods:

- A **query filter** that is passed in the ``find()`` method. The ``lt()``
  filter matches only movies with a runtime of less than 15 minutes.

- A **sort** that organizes returned documents in descending order by
  title ("Z" before "A").

- A **projection** that includes the objects in the ``title`` and ``imdb``
  fields and excludes the ``_id`` field using the helper method
  ``excludeId()``.

- For more background on connection uri's see our connection guide. 

More Background
---------------

In this section, we provide in depth background on the method, options, return
values, and errors that you can encounter in the above example.

.. tabs::

   .. tab:: Method
      :tabid: method

      You can query for multiple documents in a collection by calling the ``find()``
      method on a ``MongoCollection`` object. Pass a query filter to the
      ``find()`` method to query for and return documents that match the filter in
      the collection. If you do not include a filter, MongoDB returns all the
      documents in the collection.

      For more information on querying MongoDB with the Java driver, see our
      guide (TODO: link) to querying documents.

   .. tab:: Options
      :tabid: options
      
      You can also chain methods to the ``find()`` method such as ``sort()``
      (TODO: link) which organizes the matched documents in a specified order and
      ``projection()`` (TODO: link) which configures the included fields in the
      return document.

   .. tab:: Return
      :tabid: return

      The ``find()`` method returns an instance of ``FindIterable``, a class
      that offers several methods to access, organize, and traverse the results.
      ``FindIterable`` also inherits methods from its parent class,
      ``MongoIterable`` which implements the core Java interface ``Iterable``.

      You can call the ``iterator()`` method on the ``MongoIterable`` which
      returns a ``MongoCursor`` instance that you can use to traverse the results.
      You can call methods on the ``MongoCursor`` such as ``hasNext()`` to check
      whether additional results exist, or ``next()`` to return the next document
      in the collection. If no documents match the query, calling ``hasNext()``
      returns ``false`` and therefore calling ``next()`` throws an exception.

        
   .. tab:: Errors
      :tabid: error

      If you call ``next()`` on the iterator either after it has returned the final
      result or when no results exist, it throws an exception of type
      ``java.util.NoSuchElementException``. Always use ``hasNext()`` to check that
      additional results exist before every time you call ``next()``.

Further Reading
---------------

API Docs 
~~~~~~~~

For additional information on the classes and methods mentioned on this
page, see the following API documentation:

- :java-sync-api:`FindIterable <com/mongodb/client/FindIterable.html>`
- :java-sync-api:`MongoIterable <com/mongodb/client/MongoIterable.html>`
- :java-sync-api:`MongoCursor <com/mongodb/client/MongoCursor.html>`
- :java-sync-api:`find() <com/mongodb/client/MongoCollection.html#find()>`

Manual
~~~~~~

<SOME MANUAL LINKS>
